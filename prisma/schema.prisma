// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  admin
  user
}

model User {
  id        Int       @id @default(autoincrement())
  username  String    @unique
  email     String    @unique
  password  String
  name      String
  avatar    String?
  role      Role
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // FriendsInitiated: Permintaan pertemanan yang saya kirim (saya adalah `requesterId`)
  friendsInitiated   Friendship[]         @relation("UserRequests")
  // FriendsReceived: Permintaan pertemanan yang saya terima (saya adalah `receiverId`)
  friendsReceived    Friendship[]         @relation("UserReceives")

  groupChats        GroupChat[]       @relation("GroupAuthor")
  groupMessages     GroupChatMessage[]
  groupMemberships  GroupChatMember[]
  privateChatsOne   PrivateChat[]     @relation("UserOne")
  privateChatsTwo   PrivateChat[]     @relation("UserTwo")
  privateMessages   PrivateChatMessage[]
  todolists         Todolist[]
  UserRank         UserRank[]

  @@map("user")
}

enum FriendStatus {
  PENDING
  ACCEPTED
  BLOCKED
  REJECTED
}

model Friendship {
  id          Int           @id @default(autoincrement())
  requesterId Int        // ID pengguna yang mengirim permintaan pertemanan
  receiverId  Int        // ID pengguna yang menerima permintaan pertemanan
  status      FriendStatus  @default(PENDING)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relasi balik ke model User
  requester  User       @relation("UserRequests", fields: [requesterId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  receiver   User       @relation("UserReceives", fields: [receiverId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  // Menjamin tidak ada duplikasi permintaan pertemanan antara dua user
  @@unique([requesterId, receiverId])

  @@map("friendship")
}

model GroupChat {
  id        Int       @id @default(autoincrement())
  authorId  Int
  name      String
  image     String?    @db.VarChar(255)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  author    User       @relation("GroupAuthor", fields: [authorId], references: [id])
  messages  GroupChatMessage[]
  members   GroupChatMember[]

  @@map("group_chat")
}

model GroupChatMessage {
  id        Int       @id @default(autoincrement())
  groupId   Int
  authorId  Int
  content   String
  image     String?    @db.VarChar(255)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  group     GroupChat @relation(fields: [groupId], references: [id], onDelete: Cascade)
  author    User      @relation(fields: [authorId], references: [id])

  @@map("group_chat_message")
}

model GroupChatMember {
  id       Int       @id @default(autoincrement())
  groupId  Int
  userId   Int

  group    GroupChat @relation(fields: [groupId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("group_chat_member")
}

model PrivateChat {
  id        Int      @id @default(autoincrement())
  userIdOne Int
  userIdTwo Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userOne   User     @relation("UserOne", fields: [userIdOne], references: [id])
  userTwo   User     @relation("UserTwo", fields: [userIdTwo], references: [id])
  messages  PrivateChatMessage[]

  @@map("private_chat")
}

model PrivateChatMessage {
  id        Int       @id @default(autoincrement())
  chatId    Int
  authorId  Int
  content   String    @db.Text
  image     String?    @db.VarChar(255)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  chat      PrivateChat @relation(fields: [chatId], references: [id])
  author    User        @relation(fields: [authorId], references: [id])

  @@map("private_chat_message")
}

enum TodolistStatus {
  completed
  progress
  uncompleted
}

enum TodolistColor {
  cyan
  dark_blue
  yellow
  black
  sage
}

model Todolist {
  id Int @id @default(autoincrement())
  userId Int
  title String
  description String? @db.VarChar(255)
  status TodolistStatus
  priority Int
  icon String
  deadline String
  isChecked Boolean @default(false)
  color TodolistColor @default(black)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model RankCategory {
  id         Int        @id @default(autoincrement())
  name       String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  userRank   UserRank[]

  @@map("rank_category")
}

model UserRank {
  id           Int           @id @default(autoincrement())
  userId       Int           @unique
  rankCatId       Int           
  rankValue    Int
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  rankCategory RankCategory  @relation(fields: [rankCatId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("user_rank")
}
